#!/usr/bin/env bash

require() {
  for cmd in "$@"; do
    if ! hash "$cmd" 2> /dev/null; then
      echo "Error: Required command '$cmd' not found. Please install it." >&2
      exit 127
    fi
  done
}

# Check for existence of local pre-commit hook and execute it first
if [[ -f .git/hooks/pre-commit ]]; then
  if ! .git/hooks/pre-commit "$@"; then
    echo 'Local pre-commit hook failed, please see output above'
    exit 1
  fi
fi

set -e
require dirname readlink

# include functions that check different file types
parentpath="$(dirname "$(readlink -f "$0")")"
if [[ -e "${parentpath}/checkfiletypes.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/checkfiletypes.sh"
fi
if [[ -e "${parentpath}/optimize.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/optimize.sh"
fi
if [[ -e "${parentpath}/format.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/format.sh"
fi
if [[ -e "${parentpath}/format_markdown.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/format_markdown.sh"
fi
if [[ -e "${parentpath}/whitespace.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/whitespace.sh"
fi
if [[ -e "${parentpath}/shellcheck.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/shellcheck.sh"
fi

# check that all required dependencies are installed
require shellcheck ggshield git parallel jpegoptim stat find head tidy rm wscheck file mktemp shfmt jq sponge expand sed prettier
declare -i ret=0
declare -a FILES=()

# run shellcheck against shell executables and shell script functions
checkshs || ((ret = 1))
checkexecs || ((ret = 1))

# optimize jpeg files
optimizejpgs || ((ret = 1))

# format xml files
format_xml || ((ret = 1))
# format json files
format_json || ((ret = 1))
# format markdown files
format_markdown || ((ret = 1))

# format go files
format_go || ((ret = 1))

# check for whitespace
checkws || ((ret = 1))

# check if there are any files to be committed after formatting
# add D to filter to include deleted files
# deleted files are to be included as committed files
mapfile -t FILES < <(git diff --cached --name-only --diff-filter=ACMRD)

if [ ${#FILES[@]} -eq 0 ]; then
  # this will also fail empty commits
  # if you wish to commit an empty commit
  # use the --no-verify option which will skip this pre-commit
  echo 1>&2 "No files changed after processing or empty commit. Commit failed."
  ((ret = 1))
fi

echo "Executing ggshield..."
# execute ggshield to check if any of files have any security tokens or secrets encoded
ggshield secret scan pre-commit "$@" || ((ret = 1))
exit "$ret"
