#!/usr/bin/env bash
require() {
  hash "$@" || exit 127
}

# Check for existence of local pre-commit hook and execute it first
if [[ -f .git/hooks/pre-commit ]]; then
  if ! .git/hooks/pre-commit "$@"; then
    echo 'Local pre-commit hook failed, please see output above'
    exit 1
  fi
fi

set -e
require dirname readlink

# include functions that check different file types
parentpath="$(dirname "$(readlink -f "$0")")"
if [[ -e "${parentpath}/checkfiletypes.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/checkfiletypes.sh"
fi
if [[ -e "${parentpath}/optimize.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/optimize.sh"
fi
if [[ -e "${parentpath}/format.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/format.sh"
fi
if [[ -e "${parentpath}/whitespace.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/whitespace.sh"
fi

checkshs() {
  local exts="$1"
  local ret=0
  cmd="git diff --cached --name-only --diff-filter=ACMR | grep $exts"
  readarray -t files < <(eval "$cmd")
  ret=$((ret + $?))
  for file in "${files[@]}"; do
    if isshellscript "$file"; then
      formatandcheck "$file"
      ret=$((ret + $?))
    fi
  done
  return "$ret"
}

checkexecs() {
  local ret=0
  cmd="git diff --cached --name-only --diff-filter=ACMR | grep -v '\.'"
  readarray -t files < <(eval "$cmd")
  ret=$((ret + $?))
  cmd="git diff --cached --name-only --diff-filter=ACMR | grep '^\.'"
  readarray -t dots < <(eval "$cmd")
  ret=$((ret + $?))
  files+=("${dots[@]}")
  for file in "${files[@]}"; do
    if test -x "$file" && test ! -d "$file" && isshellscript "$file"; then
      formatandcheck "$file"
      ret=$((ret + $?))
    fi
  done
  return "$ret"
}

# check that all required dependencies are installed
require shellcheck ggshield git parallel jpegoptim stat find head tidy rm wscheck file mktemp shfmt jq sponge expand sed
declare -i ret=0

# Regexp for grep to only choose sh file extension for checking
exts="'\.sh$'"

# run shellcheck against shell executables and shell script functions
checkshs "$exts"
ret=$((ret + $?))
checkexecs
ret=$((ret + $?))

# optimize jpeg files
optimizejpgs
ret=$((ret + $?))

# format xml files
formatxml
ret=$((ret + $?))

# format json files
formatjson
ret=$((ret + $?))

# format go files
formatgo
ret=$((ret + $?))

# check for whitespace
checkws
ret=$((ret + $?))

if [ ${#files[@]} -eq 0 ]; then
  # this will also fail empty commits
  # if you wish to commit an empty commit
  # use the --no-verify option which will skip thie pre-commit
  echo 1>&2 "No files changed after processing or empty commit. Commit failed."
  ret=$((ret + 1))
fi

# execute ggshield to check if any of files have any security tokens or secrets encoded
ggshield secret scan pre-commit "$@"
ret=$((ret + $?))
exit "$ret"
