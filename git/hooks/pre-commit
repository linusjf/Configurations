#!/usr/bin/env bash
require() {
  hash "$@" || exit 127
}

# Check for existence of local pre-commit hook and execute it first
if [[ -f .git/hooks/pre-commit ]]; then
  if ! .git/hooks/pre-commit "$@"; then
    echo 'Local pre-commit hook failed, please see output above'
    exit 1
  fi
fi

set -e
require dirname readlink

# include functions that check different file types
parentpath="$(dirname "$(readlink -f "$0")")"
if [[ -e "${parentpath}/checkfiletypes.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/checkfiletypes.sh"
fi
if [[ -e "${parentpath}/optimize.sh" ]]; then
  # shellcheck disable=SC1091
  source "${parentpath}/optimize.sh"
fi

formatgo() {
  local ret=0
  # Regexp for grep to only choose some file extensions for formatting
  exts="\.go$"

  cmd="git diff --cached --name-only --diff-filter=ACMR | grep $exts"
  readarray -t files < <(eval "$cmd")
  ret=$((ret + $?))

  # Format staged files
  for file in "${files[@]}"; do
    # don't format empty files
    if test -s "$file"; then
      echo "Formatting ${file}..."
      # Get the file from index
      git show ":$file" > "${file}.tmp"
      # Format it
      tmp=$(mktemp)
      gofmt "${file}.tmp" > "$tmp" && mv "$tmp" "${file}.tmp"
      ret=$((ret + $?))
      # Create a blob object from the formatted file
      hash=$(git hash-object -w "${file}.tmp")
      # Add it back to index
      mode=$(stat -c "%a" "$file")
      git update-index --add --cacheinfo "100${mode}" "$hash" "$file"
      git cat-file -p "$hash" > "${file}"
      rm "${file}.tmp"
    fi
  done
  return "$ret"
}

formatjson() {
  local ret=0
  # Regexp for grep to only choose some file extensions for formatting
  exts="\.json$"

  cmd="git diff --cached --name-only --diff-filter=ACMR | grep $exts"
  readarray -t files < <(eval "$cmd")
  ret=$((ret + $?))

  # Format staged files
  for file in "${files[@]}"; do
    # don't format empty files
    if test -s "$file"; then
      echo "Formatting ${file}..."
      # Get the file from index
      git show ":$file" > "${file}.tmp"
      # Format it
      tmp=$(mktemp)
      jq -e -S . "${file}.tmp" > "$tmp" && mv "$tmp" "${file}.tmp"
      ret=$((ret + $?))
      # Create a blob object from the formatted file
      hash=$(git hash-object -w "${file}.tmp")
      # Add it back to index
      mode=$(stat -c "%a" "$file")
      git update-index --add --cacheinfo "100${mode}" "$hash" "$file"
      git cat-file -p "$hash" > "${file}"
      rm "${file}.tmp"
    fi
  done
  return "$ret"
}

formatxml() {
  local ret=0
  declare -r configFileName="tidy.config"
  configFilePath="$(readlink -f "$configFileName")"
  # Regexp for grep to only choose some file extensions for formatting
  exts="\.xml$"

  # The formatter to use
  formatter=$(which tidy)

  # Check availability of the formatter
  if [ -z "$formatter" ]; then
    echo 1>&2 "$formatter not found. Pre-commit formatting will not be done."
    exit 0
  fi

  cmd="git diff --cached --name-only --diff-filter=ACMR | grep $exts"
  readarray -t files < <(eval "$cmd")
  ret=$((ret + $?))

  # Format staged files
  for file in "${files[@]}"; do
    # don't format empty files
    if test -s "$file"; then
      echo "Formatting ${file}..."
      # Get the file from index
      git show ":$file" > "${file}.tmp"
      # Format it
      eval "$formatter -config $configFilePath -quiet -xml -m -i ${file}.tmp"
      ret=$((ret + $?))
      # Create a blob object from the formatted file
      hash=$(git hash-object -w "${file}.tmp")
      # Add it back to index
      mode=$(stat -c "%a" "$file")
      git update-index --add --cacheinfo "100${mode}" "$hash" "$file"
      git cat-file -p "$hash" > "${file}"
      rm "${file}.tmp"
    fi
  done
  return "$ret"
}

checkws() {
  local ret=0
  # If no files left in index after formatting - fail
  # i.e., if files are similar after changes
  cmd="git diff --cached --name-only"
  readarray -t files < <(eval "$cmd")
  for file in "${files[@]}"; do
    if istextfile "$file"; then
      declare -i wsout=0
      echo "Checking ${file} for whitespace..."
      tmp="$(mktemp)"
      if isxmlfile "$file"; then
        striptabsandlines "$file" 0
        wscheck --color --exclude WSC002 WSC003 --checkstyle "$tmp" -- "$file"
        wsout=$?
      elif isgofile "$file"; then
        striptabsandlines "$file" 0
        wscheck --color --exclude WSC004 --checkstyle "$tmp" -- "$file"
        wsout=$?
      elif isjavafile "$file"; then
        wscheck --color --exclude WSC003 --checkstyle "$tmp" -- "$file"
        wsout=$?
      elif iscargolock "$file"; then
        wscheck --color --exclude WSC003 --checkstyle "$tmp" -- "$file"
        wsout=$?
      else
        striptabsandlines "$file"
        wscheck --color --exclude WSC003 --checkstyle "$tmp" -- "$file"
        wsout=$?
      fi
      ret=$((ret + wsout))
      if test "$wsout" -ne 0; then
        mv "$tmp" "${file}.wsout"
      else
        rm "$tmp"
      fi
    fi
  done
  return "$ret"
}

formatandcheck() {
  file="$1"
  # Get the file from index
  git show ":$file" > "${file}.tmp"
  shfmt -i 2 -bn -ci -sr -w -- "${file}.tmp"
  # Create a blob object from the formatted file
  hash=$(git hash-object -w "${file}.tmp")
  # Add it back to index
  mode=$(stat -c "%a" "$file")
  git update-index --add --cacheinfo "100${mode}" "$hash" "$file"
  git cat-file -p "$hash" > "${file}"
  rm "${file}.tmp"
  shellcheck --check-sourced --color --shell=bash -- "$file"
  return $?
}

stripnewlines() {
  awk 'NF {p=1} p' <<< "$(< "$1")" | sponge "$1"
  sed -i 's/[[:blank:]]*$//' "$1"
}

striptabsandlines() {
  file="$1"
  isxml="${2:-1}"
  # Get the file from index
  git show ":$file" > "${file}.tmp"
  if test "$isxml" -ne 0; then
    expand -i -t 2 "${file}.tmp" | sponge "${file}.tmp"
  fi
  stripnewlines "${file}.tmp"
  # Create a blob object from the formatted file
  hash=$(git hash-object -w "${file}.tmp")
  # Add it back to index
  mode=$(stat -c "%a" "$file")
  git update-index --add --cacheinfo "100${mode}" "$hash" "$file"
  git cat-file -p "$hash" > "${file}"
  rm "${file}.tmp"
  return $?
}

checkshs() {
  local exts="$1"
  local ret=0
  cmd="git diff --cached --name-only --diff-filter=ACMR | grep $exts"
  readarray -t files < <(eval "$cmd")
  ret=$((ret + $?))
  for file in "${files[@]}"; do
    if isshellscript "$file"; then
      formatandcheck "$file"
      ret=$((ret + $?))
    fi
  done
  return "$ret"
}

checkexecs() {
  local ret=0
  cmd="git diff --cached --name-only --diff-filter=ACMR | grep -v '\.'"
  readarray -t files < <(eval "$cmd")
  ret=$((ret + $?))
  cmd="git diff --cached --name-only --diff-filter=ACMR | grep '^\.'"
  readarray -t dots < <(eval "$cmd")
  ret=$((ret + $?))
  files+=("${dots[@]}")
  for file in "${files[@]}"; do
    if test -x "$file" && test ! -d "$file" && isshellscript "$file"; then
      formatandcheck "$file"
      ret=$((ret + $?))
    fi
  done
  return "$ret"
}

# check that all required dependencies are installed
require shellcheck ggshield git parallel jpegoptim stat find head tidy rm wscheck file mktemp shfmt jq sponge expand sed
declare -i ret=0

# Regexp for grep to only choose sh file extension for checking
exts="'\.sh$'"

# run shellcheck against shell executables and shell script functions
checkshs "$exts"
ret=$((ret + $?))
checkexecs
ret=$((ret + $?))

# optimize jpeg files
optimizejpgs
ret=$((ret + $?))

# format xml files
formatxml
ret=$((ret + $?))

# format json files
formatjson
ret=$((ret + $?))

# format go files
formatgo
ret=$((ret + $?))

# check for whitespace
checkws
ret=$((ret + $?))

if [ ${#files[@]} -eq 0 ]; then
  # this will also fail empty commits
  # if you wish to commit an empty commit
  # use the --no-verify option which will skip thie pre-commit
  echo 1>&2 "No files changed after processing or empty commit. Commit failed."
  ret=$((ret + 1))
fi

# execute ggshield to check if any of files have any security tokens or secrets encoded
ggshield secret scan pre-commit "$@"
ret=$((ret + $?))
exit "$ret"
